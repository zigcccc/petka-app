name: Code Quality
on:
  push:
    branches:
      - main

jobs:
  lint-test:
    name: Lint, test
    runs-on: ubuntu-latest
    # Let the job post results back to the PR (Sonar, test checks, …)
    permissions:
      contents: read
      pull-requests: write

    steps:
      # 1️⃣  Pull the source
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣  Install PNPM (no auto‑install yet)
      - uses: pnpm/action-setup@v4     #  [oai_citation:1‡github.com](https://github.com/pnpm/action-setup)
        with:
          run_install: false

      # 3️⃣ Set up Node + cache PNPM store
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      # 4️⃣  Install deps (cache hit makes this fast)
      - name: Install deps
        run: pnpm install --frozen-lockfile

      # 5️⃣  Lint
      - name: Lint
        run: pnpm run lint

      # 6️⃣  Type‑check
      - name: Typecheck
        run: pnpm run typecheck

      # 7️⃣  Unit tests (creates coverage/lcov.info)
      - name: Test
        run: pnpm run test:coverage

      # 8️⃣  Upload coverage artefact
      - name: Upload coverage artefact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          
  sonar:
    name: Sonar analysis
    needs: lint-test
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: ./coverage

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  convex:
    name: Convex Deployment
    needs: lint-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4     #  [oai_citation:1‡github.com](https://github.com/pnpm/action-setup)
        with:
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      
      - name: Deploy Convex to Production 🚀
        run: pnpx convex deploy --yes
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOYMENT_PROD }}

      - name: Run Convex migrations 🔄
        run: pnpx convex run --prod migrations:runAll
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOYMENT_PROD }}

  expo:
    needs: convex
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4     #  [oai_citation:1‡github.com](https://github.com/pnpm/action-setup)
        with:
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup ENV
        run: |
          touch .env
          echo "EXPO_PUBLIC_CONVEX_URL=${{ vars.CONVEX_URL_PROD }}" >> .env
          echo "SENTRY_AUTH_TOKEN=${{secrets.SENTRY_AUTH_TOKEN}}" >> .env

      - name: Compute build-scoped version
        id: version
        run: |
          RAW_VERSION=$(jq -r '.version' package.json)   # e.g. 1.4.7
          echo "Raw version is $RAW_VERSION"

          BASE_VERSION=${RAW_VERSION%.*}                 # becomes 1.4

          BUILD=${GITHUB_RUN_NUMBER}                     # e.g. 128
          NEW_VERSION="${BASE_VERSION}.${BUILD}"         # 1.4.128
          echo "NEW_VERSION=$NEW_VERSION"

          jq ".version = \"$NEW_VERSION\"" package.json > tmp && mv tmp package.json
          jq ".expo.version = \"$NEW_VERSION\"" app.json > tmp && mv tmp app.json
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push EAS Update to Production
        run: eas update --channel production --message "v${{steps.version.outputs.version}}"

      - name: Upload source maps to Sentry
        run: pnpx sentry-expo-upload-sourcemaps dist
        env:
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}


      